# –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É http://localhost:8502/
from openai import OpenAI
from parse_hh import get_html, extract_vacancy_data, extract_resume_data
import requests

# –°–ª–æ–≤–∞—Ä—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è soft-skills
soft_skills_keywords = {
    "–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏": ["–∫–æ–º–º—É–Ω–∏–∫–∞—Ü", "–æ–±—â–µ–Ω–∏", "–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤", "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü"],
    "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": ["–ª–∏–¥–µ—Ä", "—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤", "team lead", "–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞"],
    "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å": ["—Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤", "—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Å—Ç—Ä–µ—Å—Å", "—Å–ø–æ–∫–æ–π—Å—Ç–≤"],
    "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": ["–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤", "—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω", "–ø—Ä–µ–¥–ª–∞–≥–∞–ª –∏–¥–µ"],
    "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": ["–∫—Ä–µ–∞—Ç–∏–≤", "—Ç–≤–æ—Ä—á–µ—Å", "–≥–µ–Ω–µ—Ä–∞—Ü–∏ –∏–¥"],
    "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ": ["—Ä–∞–±–æ—Ç–µ –≤ –∫–æ–º–∞–Ω–¥", "teamwork", "—Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–ª"],
    "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å": ["–∞–¥–∞–ø—Ç–∏–≤–Ω", "–≥–∏–±–∫", "–±—ã—Å—Ç—Ä–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è"],
}

def extract_soft_skills(resume_text: str):
    found = []
    text_lower = resume_text.lower()
    for skill_name, keywords in soft_skills_keywords.items():
        for kw in keywords:
            if kw in text_lower:
                found.append(skill_name)
                break
    return list(set(found))

# –ß–∏—Ç–∞–µ–º OpenAI-–∫–ª—é—á –∏–∑ secrets.toml
try:
    api_key = st.secrets["OPENAI_API_KEY"]
except KeyError:
    st.error("API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ st.secrets['OPENAI_API_KEY']! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª secrets.toml.")
    st.stop()

client = OpenAI(api_key=api_key)

SYSTEM_PROMPT = """
–ü—Ä–æ—Å–∫–æ—Ä—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.
–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ—è—Å–Ω—è—Ç—å –æ—Ü–µ–Ω–∫—É.
–û—Ç–¥–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∑—é–º–µ (–ø–æ–Ω—è—Ç–Ω–æ –ª–∏, —Å –∫–∞–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Å—Ç–∞–ª–∫–∏–≤–∞–ª—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç –∏ –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –∏—Ö —Ä–µ—à–∞–ª?). 
–≠—Ç–∞ –æ—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ ‚Äì –Ω–∞–º –≤–∞–∂–Ω–æ –Ω–∞–Ω–∏–º–∞—Ç—å —Ç–∞–∫–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.
–ü–æ—Ç–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç 1 –¥–æ 10.
""".strip()

def request_gpt(system_prompt, user_prompt):
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user",   "content": user_prompt},
        ],
        max_tokens=1000,
        temperature=0,
    )
    return response.choices[0].message.content

st.title("CV Scoring App")

# –ü–æ–ª–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
job_url = st.text_area("1) –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é hh.ru")

# –ë–ª–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ / —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
st.header("üîß –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
if "criteria_raw" not in st.session_state:
    st.session_state["criteria_raw"] = ""
if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏"):
    job_url_str = job_url.strip()
    if not job_url_str.lower().startswith("http"):
        st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é")
    else:
        job_html = get_html(job_url_str).text
        job_md = extract_vacancy_data(job_html)
        prompt_for_criteria = (
            f"–ù–∏–∂–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ (Markdown):\n\n{job_md}\n\n"
            "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 5‚Äì7 –∫–ª—é—á–µ–≤—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)."
        )
        criteria_from_gpt = request_gpt(SYSTEM_PROMPT, prompt_for_criteria)
        st.session_state["criteria_raw"] = criteria_from_gpt

criteria_raw = st.text_area(
    label="–ö–ª—é—á–µ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)",
    value=st.session_state.get("criteria_raw", ""),
    height=150
)
criteria_list = [line.strip("‚Ä¢ ").strip() for line in criteria_raw.splitlines() if line.strip()]

# –ü–æ–ª–µ –¥–ª—è —Ä–µ–∑—é–º–µ (plain-text)
resume_input = st.text_area("2) –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ (–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞)")

if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"):
    with st.spinner("–ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT..."):
        try:
            # 1) –ü–∞—Ä—Å–∏–º –≤–∞–∫–∞–Ω—Å–∏—é
            job_url_str = job_url.strip()
            if not job_url_str.lower().startswith("http"):
                st.error("–ü–æ–ª–µ ¬´—Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é¬ª –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
                st.stop()
            job_html = get_html(job_url_str).text
            job_text = extract_vacancy_data(job_html)

            # 2) –ó–¥–µ—Å—å: —Ä–µ–∑—é–º–µ ‚Äî plain-text (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—Ç–∞–≤–∏–ª —É–∂–µ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç)
            resume_text = resume_input.strip()
            if not resume_text:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ (plain-text), –∞ –Ω–µ —Å—Å—ã–ª–∫—É.")
                st.stop()

            # 3) –í—ã–¥–µ–ª—è–µ–º soft-skills
            soft_skills_found = extract_soft_skills(resume_text)
            soft_block = ""
            if soft_skills_found:
                soft_block = "## SOFT-SKILLS (–≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ):\n" + \
                             "\n".join(f"- {s}" for s in soft_skills_found) + "\n\n"

            # 4) –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
            criteria_block = ""
            if criteria_list:
                criteria_block = "## –ö–†–ò–¢–ï–†–ò–ò –î–õ–Ø –û–¶–ï–ù–ö–ò:\n" + \
                                 "\n".join(f"- {c}" for c in criteria_list) + "\n\n"

            # 5) –°–æ–±–∏—Ä–∞–µ–º –µ–¥–∏–Ω—ã–π prompt
            prompt = (
                f"{criteria_block}"
                f"# –í–ê–ö–ê–ù–°–ò–Ø\n{job_text}\n\n"
                f"{soft_block}"
                f"# –†–ï–ó–Æ–ú–ï\n{resume_text}"
            )

            response = request_gpt(SYSTEM_PROMPT, prompt)
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
            st.markdown(response)

            # 6) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ soft-skills –ø–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            if soft_skills_found:
                st.markdown("**–ù–∞–π–¥–µ–Ω–Ω—ã–µ soft-skills:** " + ", ".join(soft_skills_found))

        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
